<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gibbo.Library</name>
    </assembly>
    <members>
        <member name="T:Gibbo.Library.FontLoader">
            <summary>
            Font Loader
            </summary>
        </member>
        <member name="M:Gibbo.Library.FontLoader.Load(System.String)">
            <summary>
            Loads a font from a file path
            </summary>
            <param name="filename">The file path</param>
            <returns>Loaded font file</returns>
        </member>
        <member name="M:Gibbo.Library.FontLoader.Load(System.IO.Stream)">
            <summary>
            Loads a font from a stream
            </summary>
            <param name="stream">The stream</param>
            <returns>Loaded font file</returns>
        </member>
        <member name="T:Gibbo.Library.Classes.BMFontLoader">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.Classes.BMFontLoader.AddBMFont(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="fntFilePath"></param>
            <param name="fontTexturePath"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Classes.BMFontLoader.Clear">
            <summary>
            Clears the renderers cache
            </summary>
        </member>
        <member name="P:Gibbo.Library.Classes.BMFontLoader.FontRenderers">
            <summary>
            The available font renderers
            </summary>
        </member>
        <member name="T:Gibbo.Library.FontRenderer">
            <summary>
            Font Renderer
            </summary>
        </member>
        <member name="M:Gibbo.Library.FontRenderer.#ctor(Gibbo.Library.FontFile,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Instantiates this instance
            </summary>
            <param name="fontFile">The font file</param>
            <param name="fontTexture">The font texture</param>
        </member>
        <member name="M:Gibbo.Library.FontRenderer.DrawText(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.String)">
            <summary>
            Draws Text
            </summary>
            <param name="spriteBatch">The spritebatch</param>
            <param name="position">The position</param>
            <param name="text">The text to be drawn</param>
        </member>
        <member name="M:Gibbo.Library.FontRenderer.DrawText(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.String,Microsoft.Xna.Framework.Color)">
            <summary>
            
            </summary>
            <param name="spriteBatch"></param>
            <param name="position"></param>
            <param name="text"></param>
            <param name="color"></param>
        </member>
        <member name="M:Gibbo.Library.FontRenderer.DrawText(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,System.String,System.Single)">
            
            <summary>
            Draws Text
            </summary>
            <param name="spriteBatch">The spritebatch</param>
            <param name="position">The position</param>
            <param name="text">The text to be drawn</param>
            <param name="scale">The scale</param>
        </member>
        <member name="M:Gibbo.Library.FontRenderer.DrawText(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,System.Int32,System.String)">
            <summary>
            Draws Text
            </summary>
            <param name="spriteBatch">The spritebatch</param>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <param name="text">The text to be drawn</param>
        </member>
        <member name="M:Gibbo.Library.FontRenderer.DrawText(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,System.Int32,System.String,System.Single,Microsoft.Xna.Framework.Color,System.Int32,Gibbo.Library.TextAlignModes)">
            <summary>
            
            </summary>
            <param name="spriteBatch"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="text"></param>
            <param name="scale"></param>
            <param name="color"></param>
            <param name="lineSpacing"></param>
        </member>
        <member name="M:Gibbo.Library.FontRenderer.MeasureString(System.String,System.Single,System.Int32)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="scale"></param>
            <param name="lineSpacing"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.FontRenderer.MeasureString(System.String[],System.Single,System.Int32)">
            <summary>
            Measure all lines resulting in the max size
            </summary>
            <param name="lines"></param>
            <param name="scale"></param>
            <param name="lineSpacing"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.FontRenderer.MeasureString(System.String,System.Single)">
            <summary>
            Measure a string (width and height)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.FontRenderer.FontFile">
            <summary>
            
            </summary>
            
        </member>
        <member name="P:Gibbo.Library.FontRenderer.Texture">
            <summary>
            
            </summary>
            
        </member>
        <member name="T:Gibbo.Library.AnimatedSprite">
            <summary>
            Animated Sprite Object
            </summary>
        </member>
        <member name="T:Gibbo.Library.GameObject">
            <summary>
            Game Object
            This class can be used to represent objects in the game. You can attach components to it.
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameObject.#ctor">
            <summary>
            The default constructor of this game object.
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameObject.Initialize">
            <summary>
            Initializes this object.
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameObject.GetComponents">
            <summary>
            Gets the components of this object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GameObject.AddComponent(Gibbo.Library.ObjectComponent)">
            <summary>
            Adds a component to this object.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Gibbo.Library.GameObject.RemoveComponent(Gibbo.Library.ObjectComponent)">
            <summary>
            Remove a component from this object
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Gibbo.Library.GameObject.RemoveAllComponents">
            <summary>
            Remove all components from this object
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameObject.SaveComponentValues">
            <summary>
            Save the current state of this object components.
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameObject.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the logic of this game object.
            Components and children are notified to update.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:Gibbo.Library.GameObject.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws the game object.
            Components and children are notified to draw.
            </summary>
            <param name="gameTime"></param>
            <param name="spriteBatch"></param>
        </member>
        <member name="M:Gibbo.Library.GameObject.Remove(System.String)">
            <summary>
            Removes the gameobject in the active scene by its name
            </summary>
            <param name="src">object name</param>
            <returns>null if not found</returns>
        </member>
        <member name="M:Gibbo.Library.GameObject.Remove(Gibbo.Library.GameObject)">
            <summary>
            Removes the gameobject in the active scene by its name
            </summary>
            <param name="src">object</param>
            <returns>null if not found</returns>
        </member>
        <member name="M:Gibbo.Library.GameObject.Find(System.String,Gibbo.Library.SearchOptions)">
            <summary>
            Searches for the gameobject in the active scene 
            </summary>
            <param name="src">search parameter</param>
            <param name="searchOption">what to look for</param>
            <returns>null if not found</returns>
        </member>
        <member name="M:Gibbo.Library.GameObject.GetAllGameObjects">
            <summary>
            Gets all gameobjects
            </summary>
            <returns>A list with all the game objects of the current scene</returns>
        </member>
        <member name="M:Gibbo.Library.GameObject.OnMouseDown(Gibbo.Library.MouseEventButton)">
            <summary>
            Event thrown when there is a mouse down collision
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameObject.OnMouseClick(Gibbo.Library.MouseEventButton)">
            <summary>
            Event thrown when there is a mouse click collision
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameObject.OnMouseMove">
            <summary>
            Event thrown when there is a mouse move collision
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameObject.OnMouseUp">
            <summary>
            Event thrown when the mouse is not over the object
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameObject.OnMouseOut">
            <summary>
            Event thrown when the mouse is not over the object
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameObject.OnCollisionEnter(Gibbo.Library.GameObject)">
            <summary>
            Event thrown when another object collides with this.
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Gibbo.Library.GameObject.OnCollisionFree">
            <summary>
            Event thrown in a frame where there is no collision with other objects
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameObject.Save(System.String)">
            <summary>
            Saves the game object
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Gibbo.Library.GameObject.Clone">
            <summary>
            Clone the game object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GameObject.ToString">
            <summary>
            To String.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.GameObject.Children">
            <summary>
            The children game objects
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameObject.MouseOver">
            <summary>
            Gets the mouse over state in this object
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameObject.Tag">
            <summary>
            Game object tag.
            This can be used to reference the game object in the game.
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameObject.CollisionModel">
            <summary>
            The collision model of this object
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameObject.Visible">
            <summary>
            Determine if the object is to be drawn in the game.
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameObject.Selectable">
            <summary>
            Determine if the object can be selected
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameObject.Name">
            <summary>
            The name of the object
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameObject.Transform">
            <summary>
            The object Transformation Matrix.
            </summary>
        </member>
        <member name="M:Gibbo.Library.AnimatedSprite.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this instance
            </summary>
            <param name="gameTime">The gametime</param>
        </member>
        <member name="M:Gibbo.Library.AnimatedSprite.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws this instance
            </summary>
            <param name="gameTime">The gametime</param>
            <param name="spriteBatch">The spriteBatch</param>
        </member>
        <member name="P:Gibbo.Library.AnimatedSprite.Texture">
            <summary>
            The active texture of the animated sprite
            </summary>
        </member>
        <member name="P:Gibbo.Library.AnimatedSprite.AutoCollisionModel">
            <summary>
            Automatically calculates the collision boundries based on the texture size
            </summary>
        </member>
        <member name="P:Gibbo.Library.AnimatedSprite.CurrentRow">
            <summary>
            Automatically calculates the collision boundries based on the texture size
            </summary>
        </member>
        <member name="P:Gibbo.Library.AnimatedSprite.CurrentColumn">
            <summary>
            Automatically calculates the collision boundries based on the texture size
            </summary>
        </member>
        <member name="P:Gibbo.Library.AnimatedSprite.Delay">
            <summary>
            The delay of each animation step
            </summary>
        </member>
        <member name="P:Gibbo.Library.AnimatedSprite.TotalFramesPerRow">
            <summary>
            The total frames available in each texture
            </summary>
        </member>
        <member name="P:Gibbo.Library.AnimatedSprite.TotalRows">
            <summary>
            The total frames available in each texture
            </summary>
        </member>
        <member name="P:Gibbo.Library.AnimatedSprite.IsPlaying">
            <summary>
            Determines if the current texture is being animated
            </summary>
        </member>
        <member name="P:Gibbo.Library.AnimatedSprite.ImageName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.AnimatedSprite.Loop">
            <summary>
            Determines if the current texture is being animated
            </summary>
        </member>
        <member name="P:Gibbo.Library.AnimatedSprite.Color">
            <summary>
            The fill color
            </summary>
        </member>
        <member name="T:Gibbo.Library.Audio">
            <summary>
            Class to play Audio
            </summary>
        </member>
        <member name="M:Gibbo.Library.Audio.Unload">
            <summary>
            Unloads audio wave
            </summary>
        </member>
        <member name="M:Gibbo.Library.Audio.PlayAudio(System.String,System.Boolean)">
            <summary>
            Play a .mp3 or .wav audio file
            </summary>
            <param name="filePath">The relative path to the audio file</param>
            <param name="loop">Determine if the sound should loop</param>
        </member>
        <member name="M:Gibbo.Library.Audio.PlayAudio(System.String)">
            <summary>
            Play a .mp3 or .wav audio file
            </summary>
            <param name="filePath">The relative path to the audio file</param>
        </member>
        <member name="M:Gibbo.Library.Audio.CreateInputStream(System.String)">
            <summary>
            Creates a wave stream from a selected file
            </summary>
            <param name="fileName">The file path to the audio file (.mp3 or .wav)</param>
            <returns></returns>
        </member>
        <member name="T:Gibbo.Library.AudioObject">
            <summary>
            Audio Game Object
            </summary>
        </member>
        <member name="M:Gibbo.Library.AudioObject.Initialize">
            <summary>
            Initializes this instance
            </summary>
        </member>
        <member name="M:Gibbo.Library.AudioObject.Play">
            <summary>
            Plays the selected audio file
            </summary>
        </member>
        <member name="P:Gibbo.Library.AudioObject.FilePath">
            <summary>
            The relative path to the audio file
            </summary>
        </member>
        <member name="P:Gibbo.Library.AudioObject.Loop">
            <summary>
            Determine if the audio will loop in the end
            </summary>
        </member>
        <member name="P:Gibbo.Library.AudioObject.IsPlaying">
            <summary>
            Determine if the audio is playing
            </summary>
        </member>
        <member name="P:Gibbo.Library.AudioObject.PlayOnStart">
            <summary>
            Determine if the audio will automatically play when a scene is loaded
            </summary>
        </member>
        <member name="T:Gibbo.Library.Camera">
            <summary>
            Game Camera
            </summary>
        </member>
        <member name="M:Gibbo.Library.Camera.#ctor">
            <summary>
            Camera constructor
            </summary>
        </member>
        <member name="M:Gibbo.Library.Camera.CalculateTransform">
            <summary>
            Calculates the transformation matrix of the camera.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Camera.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.Camera.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.Camera.Zoom">
            <summary>
            Camera zoom
            </summary>
        </member>
        <member name="P:Gibbo.Library.Camera.TransformMatrix">
            <summary>
            The current Camera.tion matrix.
            </summary>
        </member>
        <member name="P:Gibbo.Library.Camera.BoundingBox">
            <summary>
            The bounding box of the tile
            </summary>
        </member>
        <member name="T:Gibbo.Library.CollisionManager">
            <summary>
            The default collision engine
            </summary>
        </member>
        <member name="M:Gibbo.Library.CollisionManager.Initialize">
            <summary>
            Initializes the collision manager
            </summary>
        </member>
        <member name="M:Gibbo.Library.CollisionManager.Update">
            <summary>
            Update the collision manager and look for collisions in the scene
            </summary>
        </member>
        <member name="M:Gibbo.Library.CollisionManager.ObjectCollision(Gibbo.Library.GameObject,System.Boolean,Gibbo.Library.GameObject)">
            <summary>
            Collision between objects
            </summary>
            <param name="_gameObject"></param>
            <param name="simulation"></param>
            <param name="exception"></param>
            <returns>The gameobjects in the collision</returns>
        </member>
        <member name="M:Gibbo.Library.CollisionManager.ComplexPixelsIntersection(Microsoft.Xna.Framework.Matrix,System.Int32,System.Int32,Microsoft.Xna.Framework.Color[],Microsoft.Xna.Framework.Matrix,System.Int32,System.Int32,Microsoft.Xna.Framework.Color[])">
            <summary>
            Determines if there is overlap of the non-transparent pixels between two texture blocks.
            </summary>
            <param name="transformA">World transform of the first texture block.</param>
            <param name="widthA">Width of the first texture block's texture.</param>
            <param name="heightA">Height of the first texture block's texture.</param>
            <param name="dataA">Pixel color data of the first texture block.</param>
            <param name="transformB">World transform of the second texture block.</param>
            <param name="widthB">Width of the second texture block's texture.</param>
            <param name="heightB">Height of the second texture block's texture.</param>
            <param name="dataB">Pixel color data of the second texture block.</param>
            <returns>True if non-transparent pixels overlap; false otherwise</returns>
        </member>
        <member name="P:Gibbo.Library.CollisionManager.GameObjectsBuffer">
            <summary>
            The game objects buffer
            This is automatically generated everytime a scene loads
            </summary>
        </member>
        <member name="T:Gibbo.Library.CollisionModel">
            <summary>
            The Collision model.
            This model can be attached to game objects and it will be used by the default collision manager
            </summary>
        </member>
        <member name="M:Gibbo.Library.CollisionModel.CalculateBoundingRectangle(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Calculates an axis aligned rectangle which fully contains an arbitrarily
            transformed axis aligned rectangle.
            </summary>
            <param name="rectangle">Original bounding rectangle.</param>
            <param name="transform">World transform of the rectangle.</param>
            <returns>A new rectangle which contains the transformed rectangle.</returns>
        </member>
        <member name="M:Gibbo.Library.CollisionModel.Initialize(Gibbo.Library.Transform)">
            <summary>
            Initializes the collision model
            </summary>
        </member>
        <member name="M:Gibbo.Library.CollisionModel.UpdateBlockData">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.CollisionModel.LoadData">
            <summary>
            Loads the block texture data
            </summary>
        </member>
        <member name="M:Gibbo.Library.CollisionModel.ToString">
            <summary>
            To string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.CollisionModel.Clone">
            <summary>
            Clones this collision model
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.CollisionModel.BlockTexture">
            <summary>
            The block texture
            </summary>
        </member>
        <member name="P:Gibbo.Library.CollisionModel.SmartMode">
            <summary>
            Collision model mode
            </summary>
        </member>
        <member name="P:Gibbo.Library.CollisionModel.Width">
            <summary>
            The width of the collision model
            </summary>
        </member>
        <member name="P:Gibbo.Library.CollisionModel.Height">
            <summary>
             The height of the collision model
            </summary>
        </member>
        <member name="P:Gibbo.Library.CollisionModel.BlockTexturePath">
            <summary>
            The block texture relative path.
            </summary>
        </member>
        <member name="P:Gibbo.Library.CollisionModel.BlockData">
            <summary>
            The block texture data.
            </summary>
        </member>
        <member name="P:Gibbo.Library.CollisionModel.BlockTextureData">
            <summary>
            The block texture data.
            </summary>
        </member>
        <member name="P:Gibbo.Library.CollisionModel.BlockTransform">
            <summary>
            The collision block transform.
            </summary>
        </member>
        <member name="P:Gibbo.Library.CollisionModel.BlockTextureTransform">
            <summary>
            The block texture collision transform.
            </summary>
        </member>
        <member name="P:Gibbo.Library.CollisionModel.CollisionBoundry">
            <summary>
            The collision boundry
            </summary>
        </member>
        <member name="T:Gibbo.Library.BMFont">
            <summary>
            Bitmap Font Class
            </summary>
        </member>
        <member name="M:Gibbo.Library.BMFont.Initialize">
            <summary>
            Initializes this instance
            </summary>
        </member>
        <member name="M:Gibbo.Library.BMFont.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws this instance
            </summary>
            <param name="gameTime">The gametime</param>
            <param name="spriteBatch">The spriteBatch</param>
        </member>
        <member name="P:Gibbo.Library.BMFont.AlignMode">
            <summary>
            The alignment mode 
            </summary>
        </member>
        <member name="P:Gibbo.Library.BMFont.Text">
            <summary>
            The text to be displayed
            </summary>
        </member>
        <member name="P:Gibbo.Library.BMFont.FntFilePath">
            <summary>
            The relative fnt file path
            </summary>
        </member>
        <member name="P:Gibbo.Library.BMFont.TextureFilePath">
            <summary>
            The relative texture file path
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Gibbo.Library.BMFont.Origin" -->
        <member name="P:Gibbo.Library.BMFont.LineSpacing">
            <summary>
            The spacing between lines
            </summary>
        </member>
        <member name="P:Gibbo.Library.BMFont.OverlayColor">
            <summary>
            The overlay color
            </summary>
        </member>
        <member name="T:Gibbo.Library.Tile">
            <summary>
            Tile Structure
            </summary>
        </member>
        <member name="F:Gibbo.Library.Tile.Source">
            <summary>
            The source rectangle of the tile
            </summary>
        </member>
        <member name="M:Gibbo.Library.Tile.DeepCopy">
            <summary>
            Deep Copy 
            </summary>
            <returns>New tile based on this instance</returns>
        </member>
        <member name="T:Gibbo.Library.Tileset">
            <summary>
            Brush Object
            </summary>
        </member>
        <member name="M:Gibbo.Library.Tileset.CollisionZone(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Gets the near area of the matrix where the boundries are colliding
            </summary>
            <param name="boundries">Collision boundry to test</param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Tileset.#ctor">
            <summary>
            Initializes this instance
            </summary>
        </member>
        <member name="M:Gibbo.Library.Tileset.Initialize">
            <summary>
            Initializes this instance
            </summary>
        </member>
        <member name="M:Gibbo.Library.Tileset.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this instance
            </summary>
            <param name="gameTime">The gametime</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws this instance
            </summary>
            <param name="gameTime">The gametime</param>
            <param name="spriteBatch">The spriteBatch</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.ResizeTileset(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="newWidth"></param>
            <param name="newHeight"></param>
        </member>
        <member name="M:Gibbo.Library.Tileset.TileWorldPos(System.Int32,System.Int32)">
            <summary>
            Gets the tile world position based on the matrix position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Tileset.TileMatrixPos(System.Single,System.Single)">
            <summary>
            Gets the matrix position based on the world position
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Tileset.PlaceTiles(Gibbo.Library.Tile[0:,0:],Microsoft.Xna.Framework.Vector2)">
            <summary>
            Places a matrix of tiles
            </summary>
            <param name="newTiles">The tiles to place</param>
            <param name="startingPosition">The starting position (world position)</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.PlaceTiles(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Places tiles based on the source.
            This method automatically cuts the source overflow by dividing it in singular tiles.
            </summary>
            <param name="source">The area of the image that you want to use</param>
            <param name="worldPosition">The world position</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.PlaceTiles(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Places tiles based on the source and area.
            This method automatically cuts the source overflow by dividing it in singular tiles.
            </summary>
            <param name="source">The area of the image that you want to use</param>
            <param name="area">The area of the map you want to use</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.PlaceTile(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Places a tile at a desired position
            </summary>
            <param name="sourcePosition">The position of the image that you want to use</param>
            <param name="worldPosition">The world position</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.ValidPosition(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Validates position
            </summary>
            <param name="position">Matrix position</param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Tileset.WorldAreaToMatrix(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            
            </summary>
            <param name="area"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Tileset.RemoveTiles(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Removes tiles from a selected area (world position)
            </summary>
            <param name="area">The area (world position) you want to have tiles removed</param>
            <returns>The removed tiles</returns>
        </member>
        <member name="M:Gibbo.Library.Tileset.AddColumn(System.Int32)">
            <summary>
            Adds a column
            </summary>
            <param name="pointX">The column position (world coordinates)</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.AddRow(System.Int32)">
            <summary>
            Adds a row
            </summary>
            <param name="pointY">The row position (world coordinates)</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.RemoveColumn(System.Int32)">
            <summary>
            Removes a column
            </summary>
            <param name="pointX">The column position (world coordinates)</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.RemoveRow(System.Int32)">
            <summary>
            Removes a row
            </summary>
            <param name="pointY">The row position (world coordinates)</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.GrabTiles(Microsoft.Xna.Framework.Rectangle,System.Boolean)">
            <summary>
            Grabs all the tiles in the selected area
            </summary>
            <param name="area">The area to grab the tiles, must be multiple of the tile width and height.</param>
            <param name="clone">Determines if the result should use cloned tiles</param>
            <returns>The matrix of the tiles that were found. This result may contain null positions in case you select areas that aren't fully filled.</returns>
        </member>
        <member name="M:Gibbo.Library.Tileset.ShiftLeft(System.Int32)">
            <summary>
            Shifts left (amount) positions
            </summary>
            <param name="amount">The amount of positions to shift</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.ShiftRight(System.Int32)">
            <summary>
            Shifts right (amount) positions
            </summary>
            <param name="amount">The amount of positions to shift</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.ShiftUp(System.Int32)">
            <summary>
            Shifts up (amount) positions
            </summary>
            <param name="amount">The amount of positions to shift</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.ShiftDown(System.Int32)">
            <summary>
            Shifts down (amount) positions
            </summary>
            <param name="amount">The amount of positions to shift</param>
        </member>
        <member name="M:Gibbo.Library.Tileset.DeepCopy">
            <summary>
            Deep Copy
            </summary>
            <returns>A new array of the tiles in this tileset</returns>
        </member>
        <member name="P:Gibbo.Library.Tileset.Tiles">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.Tileset.TileWidth">
            <summary>
            The tile size (width)
            </summary>
        </member>
        <member name="P:Gibbo.Library.Tileset.TileHeight">
            <summary>
            The tile size (height)
            </summary>
        </member>
        <member name="P:Gibbo.Library.Tileset.ImagePath">
            <summary>
            The relative path to the image
            </summary>
        </member>
        <member name="P:Gibbo.Library.Tileset.CheckForCollisions">
            <summary>
            Determine if the collision manager should check for collisions with the tiles
            </summary>
        </member>
        <member name="P:Gibbo.Library.Tileset.Texture">
            <summary>
            The active texture
            </summary>
        </member>
        <member name="P:Gibbo.Library.Tileset.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.Tileset.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.Tileset.VisibleTiles">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.Collision">
            <summary>
            Collision
            </summary>
        </member>
        <member name="M:Gibbo.Library.Collision.Simulate(Microsoft.Xna.Framework.Vector2)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Collision.Simulate(Microsoft.Xna.Framework.Vector2,Gibbo.Library.GameObject)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Collision.Simulate(Microsoft.Xna.Framework.Vector2,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Collision.Simulate(Microsoft.Xna.Framework.Vector2,Gibbo.Library.GameObject,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="exception"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Collision.Simulate(Gibbo.Library.GameObject,Microsoft.Xna.Framework.Vector2,System.Collections.Generic.List{Gibbo.Library.GameObject}@)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="newPosition"></param>
            <param name="gameObjectsDetected"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Collision.Simulate(Microsoft.Xna.Framework.Vector2,Gibbo.Library.GameObject,System.Int32,System.Int32,System.Collections.Generic.List{Gibbo.Library.GameObject}@)">
            <summary>
            
            </summary>
            <param name="position"></param>
            <param name="exception"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GameObjectCollection.#ctor(Gibbo.Library.GameObject)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Gibbo.Library.GameObjectCollection.IndexOf(Gibbo.Library.GameObject)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GameObjectCollection.Add(Gibbo.Library.GameObject)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GameObjectCollection.Remove(Gibbo.Library.GameObject)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Gibbo.Library.GameObjectCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Gibbo.Library.GameObjectCollection.AddRange(Gibbo.Library.GameObjectCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Gibbo.Library.GameObjectCollection.AddRange(Gibbo.Library.GameObject[])">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Gibbo.Library.GameObjectCollection.Contains(Gibbo.Library.GameObject)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GameObjectCollection.Insert(System.Int32,Gibbo.Library.GameObject)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Gibbo.Library.GameObjectCollection.Find(System.Predicate{Gibbo.Library.GameObject})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GameObjectCollection.FindIndex(System.Predicate{Gibbo.Library.GameObject})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.GameObjectCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Gibbo.Library.PrimitiveBatch">
            <summary>
            PrimitiveBatch is a class that handles efficient rendering automatically for its
            users, in a similar way to SpriteBatch. PrimitiveBatch can render lines, points,
            and triangles to the screen. 
            retro scene.
            </summary>
        </member>
        <member name="T:Gibbo.Library.ContentBrowserEditor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.UI.Control">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.UI.Control.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.UI.Control.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Gibbo.Library.UI.Control.#ctor(System.String,Gibbo.Library.UI.Control)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="parent"></param>
        </member>
        <member name="M:Gibbo.Library.UI.Control.#ctor(System.String,Gibbo.Library.UI.Control,Microsoft.Xna.Framework.Vector2)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="parent"></param>
            <param name="position"></param>
        </member>
        <member name="M:Gibbo.Library.UI.Control.#ctor(System.String,Microsoft.Xna.Framework.Vector2)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="position"></param>
        </member>
        <member name="M:Gibbo.Library.UI.Control.InitializeControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.UI.Control.Initialize">
            <summary>
            Virtual Initialize
            </summary>
        </member>
        <member name="M:Gibbo.Library.UI.Control.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Virtual Update
            </summary>
            <param name="gameTime">The game time</param>
        </member>
        <member name="M:Gibbo.Library.UI.Control.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            
            </summary>
            <param name="gameTime"></param>
            <param name="spriteBatch"></param>
        </member>
        <member name="M:Gibbo.Library.UI.Control.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.UI.Control.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.UI.Control.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.UI.Control.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.UI.Control.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.UI.Control.Height">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.UI.Control.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.UI.Control.Controls">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.UI.Control.BoundingBox">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.UI.ControlCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.UI.ControlCollection.#ctor(Gibbo.Library.UI.Control)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Gibbo.Library.UI.ControlCollection.IndexOf(Gibbo.Library.UI.Control)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.UI.ControlCollection.Add(Gibbo.Library.UI.Control)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.UI.ControlCollection.Remove(Gibbo.Library.UI.Control)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Gibbo.Library.UI.ControlCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Gibbo.Library.UI.ControlCollection.AddRange(Gibbo.Library.UI.ControlCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Gibbo.Library.UI.ControlCollection.AddRange(Gibbo.Library.UI.Control[])">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Gibbo.Library.UI.ControlCollection.Contains(Gibbo.Library.UI.Control)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.UI.ControlCollection.Insert(System.Int32,Gibbo.Library.UI.Control)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="P:Gibbo.Library.UI.ControlCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Gibbo.Library.IPlugin">
            <summary>
            The plugin interface
            </summary>
        </member>
        <member name="M:Gibbo.Library.IPlugin.PerformAction(Gibbo.Library.PluginContext)">
            <summary>
            The action that will be performed when clicking on the plugin menu item (editor)
            </summary>
            <param name="pluginContext">the context of the plugin</param>
        </member>
        <member name="M:Gibbo.Library.IPlugin.Initialize">
            <summary>
            The action that will be performed when the editor starts
            </summary>
        </member>
        <member name="P:Gibbo.Library.IPlugin.Name">
            <summary>
            The name of the plugin.
            This is the name that will appear on the plugins menu
            </summary>
        </member>
        <member name="T:Gibbo.Library.PluginContext">
            <summary>
            Plugin Context
            </summary>
        </member>
        <member name="T:Gibbo.Library.Settings">
            <summary>
            Settings class.
            </summary>
        </member>
        <member name="M:Gibbo.Library.Settings.ToString">
            <summary>
            To String
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.Settings.ScreenWidth">
            <summary>
            The screen width
            </summary>
        </member>
        <member name="P:Gibbo.Library.Settings.ScreenHeight">
            <summary>
            The screen height
            </summary>
        </member>
        <member name="T:Gibbo.Library.Sprite">
            <summary>
            Sprite Object
            </summary>
        </member>
        <member name="M:Gibbo.Library.Sprite.Initialize">
            <summary>
            Initializes this instance
            </summary>
        </member>
        <member name="M:Gibbo.Library.Sprite.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates this instance
            </summary>
            <param name="gameTime">The gametime</param>
        </member>
        <member name="M:Gibbo.Library.Sprite.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws this instance
            </summary>
            <param name="gameTime">The gametime</param>
            <param name="spriteBatch">The spriteBatch</param>
        </member>
        <member name="P:Gibbo.Library.Sprite.AutoCollisionModel">
            <summary>
            Automatically calculates the collision boundries based on the texture size
            </summary>
        </member>
        <member name="P:Gibbo.Library.Sprite.DisplayMode">
            <summary>
            Determine how this sprite should be displayed
            </summary>
        </member>
        <member name="P:Gibbo.Library.Sprite.Origin">
            <summary>
            The center point
            </summary>
        </member>
        <member name="P:Gibbo.Library.Sprite.BlendMode">
            <summary>
            The blending mode
            </summary>
        </member>
        <member name="P:Gibbo.Library.Sprite.Color">
            <summary>
            The fill color
            </summary>
        </member>
        <member name="P:Gibbo.Library.Sprite.ImageName">
            <summary>
            The relative path to the image
            </summary>
        </member>
        <member name="P:Gibbo.Library.Sprite.SourceRectangle">
            <summary>
            The area of the image you want to be displayed
            </summary>
        </member>
        <member name="P:Gibbo.Library.Sprite.Texture">
            <summary>
            The texture of the sprite
            </summary>
        </member>
        <member name="T:Gibbo.Library.Sprite.DisplayModes">
            <summary>
            Display Mode
            </summary>
        </member>
        <member name="T:Gibbo.Library.EditorKeyboard">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.EditorKeyboard.GetState">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.EditorKeyboard.GetState(Microsoft.Xna.Framework.PlayerIndex)">
            <summary>
            
            </summary>
            <param name="playerIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.EditorKeyboard.SetKeys(System.Collections.Generic.List{Microsoft.Xna.Framework.Input.Keys})">
            <summary>
            
            </summary>
            <param name="keys"></param>
        </member>
        <member name="T:Gibbo.Library.ExtendedObjectComponent">
            <summary>
            Class used if you want object components to update and draw in the editor.
            </summary>
        </member>
        <member name="T:Gibbo.Library.ObjectComponent">
            <summary>
            This class represents one object component.
            </summary>
        </member>
        <member name="M:Gibbo.Library.ObjectComponent.Initialize">
            <summary>
            Virtual Initialize
            </summary>
        </member>
        <member name="M:Gibbo.Library.ObjectComponent.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Virtual Update
            </summary>
            <param name="gameTime">The game time</param>
        </member>
        <member name="M:Gibbo.Library.ObjectComponent.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Virtual Draw
            </summary>
            <param name="gameTime">The game time</param>
        </member>
        <member name="M:Gibbo.Library.ObjectComponent.OnMouseDown(Gibbo.Library.MouseEventButton)">
            <summary>
            Virtual OnMouseDown Event
            Event thrown when there is a mouse click collision
            </summary>
        </member>
        <member name="M:Gibbo.Library.ObjectComponent.OnMouseClick(Gibbo.Library.MouseEventButton)">
            <summary>
            Virtual OnMouseClick Event
            Event thrown when there is a mouse click collision
            </summary>
        </member>
        <member name="M:Gibbo.Library.ObjectComponent.OnMouseUp">
            <summary>
            Event thrown when the mouse up event on the game object is triggered
            </summary>
        </member>
        <member name="M:Gibbo.Library.ObjectComponent.OnMouseOut">
            <summary>
            Event thrown when the mouse is not over the object
            </summary>
        </member>
        <member name="M:Gibbo.Library.ObjectComponent.OnMouseMove">
            <summary>
            Virtual OnMouseMove Event
            Event thrown when there is a mouse move collision
            </summary>
        </member>
        <member name="M:Gibbo.Library.ObjectComponent.OnCollisionEnter(Gibbo.Library.GameObject)">
            <summary>
            Virtual OnCollisionEnter Event
            Event thrown when there is an object collision.
            </summary>
            <param name="other">The collided object</param>
        </member>
        <member name="M:Gibbo.Library.ObjectComponent.OnCollisionFree">
            <summary>
            Virtual OnCollisionEnter Event
            Event thrown in a frame where there is no collision with other objects
            </summary>
        </member>
        <member name="M:Gibbo.Library.ObjectComponent.ToString">
            <summary>
            To String
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.ObjectComponent.Clone">
            <summary>
            Clone this object
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.ObjectComponent.Name">
            <summary>
            The name of the component
            </summary>
        </member>
        <member name="P:Gibbo.Library.ObjectComponent.Transform">
            <summary>
            The reference transform of the component's object 
            </summary>
        </member>
        <member name="T:Gibbo.Library.GibboCompiler">
            <summary>
            Another way of compilling scripts.
            This is not how the editor compiles the scripts, this should be used if you want to compile scripts manually.
            </summary>
        </member>
        <member name="M:Gibbo.Library.GibboCompiler.Compile(System.CodeDom.Compiler.CompilerParameters,System.String)">
            <summary>
            Compiles a source file with the given parameters and source
            </summary>
            <param name="parms"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GibboCompiler.CompileScripts(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Compiles the input string and saves it to an output.dll
            </summary>
            <param name="source">Source Code</param>
            <param name="referencedAssemblies">The assembly names to be referenciated</param>
            <param name="output">Filename for the output .dll</param>
        </member>
        <member name="M:Gibbo.Library.GibboCompiler.LoadScriptsToMemory(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Compiles the input string and saves it in memory
            </summary>
            <param name="source"></param>
            <param name="referencedAssemblies"></param>
            <returns></returns>
        </member>
        <member name="T:Gibbo.Library.Switch">
            <summary>
            Switch Enumeration
            </summary>
        </member>
        <member name="T:Gibbo.Library.SearchOptions">
            <summary>
            Search options Enumeration
            </summary>
        </member>
        <member name="T:Gibbo.Library.MouseEventButton">
            <summary>
            Mouse event button Enumeration
            </summary>
        </member>
        <member name="T:Gibbo.Library.TextAlignModes">
            <summary>
            Text align mode
            </summary>
        </member>
        <member name="T:Gibbo.Library.Origins">
            <summary>
            Origin
            </summary>
        </member>
        <member name="T:Gibbo.Library.BlendModes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.GibboProjectEditorSettings">
            <summary>
            The editor project settings 
            </summary>
        </member>
        <member name="M:Gibbo.Library.GibboProjectEditorSettings.ToString">
            <summary>
            To String
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.GibboProjectEditorSettings.LastOpenScenePath">
            <summary>
            The last open scene path
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProjectEditorSettings.ShowCollisions">
            <summary>
            Determines if collisions models are to be drawn
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProjectEditorSettings.ShowGrid">
            <summary>
            Determines if the grid is to be shown
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProjectEditorSettings.SnapToGrid">
            <summary>
            Determines if the object transformations will snap to the grid.
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProjectEditorSettings.GridSpacing">
            <summary>
            The unit size of the grid. The value is measured in pixels.
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProjectEditorSettings.GridColor">
            <summary>
            The color of the grid.
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProjectEditorSettings.GridThickness">
            <summary>
            The thickness of the grid.
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProjectEditorSettings.GridNumberOfLines">
            <summary>
            The number of lines to be drawn.
            </summary>
        </member>
        <member name="T:Gibbo.Library.MathExtension">
            <summary>
            This class provides some math extension methods to make some calculations easy.
            </summary>
        </member>
        <member name="M:Gibbo.Library.MathExtension.CalculateBezierPoint(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calculate basizer point based on a cubic line (4 control points)
            </summary>
            <param name="t">Current Point</param>
            <param name="p0">Initial Position</param>
            <param name="p1">Control Point 1</param>
            <param name="p2">Control Point 2</param>
            <param name="p3">End Position</param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.IsPowerOfTwo(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Checks if the input is power of two
            </summary>
            <param name="value">Input value</param>
            <returns>The test result</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.IsPowerOfTwo(System.UInt32)">
            <summary>
            Checks if the input is power of two
            </summary>
            <param name="value">Input value</param>
            <returns>The test result</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.IsPowerOfTwo(System.Int32)">
            <summary>
            Checks if the input is power of two
            </summary>
            <param name="value">Input value</param>
            <returns>The test result</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.RadiansToRotate(System.Single)">
            <summary>
            Converts a radian value to the built in unit angle
            </summary>
            <param name="radians">The input value in radians</param>
            <returns>Unit Angle</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.DegreesToRotate(System.Single)">
            <summary>
            Converts a degree value to the built in unit angle
            </summary>
            <param name="degrees">he input value in degrees</param>
            <returns>Unit Angle</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.LerpColor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Lerps a color
            </summary>
            <param name="FinalColor">The final color</param>
            <param name="InitialColor">The initial color</param>
            <param name="percentage">The percentage amount</param>
            <returns>The calculated color</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.AngleLerp(System.Single,System.Single,System.Single)">
            <summary>
            Angle lerp.
            Useful for smooth point rotations.
            </summary>
            <param name="value1">The current value</param>
            <param name="value2">The final value</param>
            <param name="lerp">The ammount</param>
            <returns>The calculated angle</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.Round(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Rounds a Vector2
            </summary>
            <param name="v">The input value</param>
            <returns>The calculated Vector2</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.ToPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Converts a Vector2 to a Point
            </summary>
            <param name="v">The input value</param>
            <returns>The calculated Point</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.ToVector2(Microsoft.Xna.Framework.Point)">
            <summary>
            Converts a Point to a Vector2
            </summary>
            <param name="p">The input value</param>
            <returns>The calculated Vector2</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.DistanceTo(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calculates the distance value between 2 Vector2's.
            </summary>
            <param name="v0">First Vector2</param>
            <param name="v">Second Vector2</param>
            <returns>The calculated distance</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.DistanceToLineSegment(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calculates the distance to line segments between 3 Vector2's
            </summary>
            <param name="v">First Vector2</param>
            <param name="a">Second Vector2</param>
            <param name="b">Third Vector2</param>
            <returns>The calculated distance</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.Transform(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Transforms a rectangle with the given transformation matrix.
            </summary>
            <param name="r">The input rectangle</param>
            <param name="m">The input matrix</param>
            <returns>The calculated rectangle</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.ToPolygon(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Convert the Rectangle to an array of Vector2 containing its 4 corners.
            </summary>
            <param name="r"></param>
            <param name="m"></param>
            <returns>An array of Vector2 representing the rectangle's corners starting from top/left and going clockwise.</returns>
        </member>
        <member name="M:Gibbo.Library.MathExtension.RectangleFromVectors(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calculates a Rectangle from to given Vector2's
            </summary>
            <param name="v1">First Vector2</param>
            <param name="v2">Second Vector2</param>
            <returns>The calculated rectangle</returns>
        </member>
        <member name="T:Gibbo.Library.GameInput">
            <summary>
            Handles the game input of the game
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameInput.Update">
            <summary>
            Updates the logic of the Game Input.
            Input states are updated here.
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameInput.IsMouseKeyPressed(Gibbo.Library.MouseEventButton)">
            <summary>
            Check if the param button is being pressed
            </summary>
            <param name="button">The button you want to test</param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GameInput.IsMouseKeyDown(Gibbo.Library.MouseEventButton)">
            <summary>
             Check if the param button is down
            </summary>
            <param name="button">The button you want to test</param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GameInput.IsMouseKeyUp(Gibbo.Library.MouseEventButton)">
            <summary>
             Check if the param button is up
            </summary>
            <param name="button">The button you want to test</param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GameInput.IsKeyPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Check if the param key is being pressed
            </summary>
            <param name="Key">The key you want to test</param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GameInput.IsKeyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Check if the param key is down
            </summary>
            <param name="key">The key you want to test</param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GameInput.IsKeyUp(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Check if the param key is up
            </summary>
            <param name="key">The key you want to test</param>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.GameInput.MouseBoundingBox">
            <summary>
            The bounding box of the mouse.
            Uses the mouse position as reference
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameInput.MouseTransform">
            <summary>
            The mouse transformation matrix
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameInput.KeyboardState">
            <summary>
            The current keyboard state.
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameInput.LastKeyboardState">
            <summary>
            The last keyboard state.
            You can use this to know how was the last state of the keyboard
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameInput.MouseState">
            <summary>
            The current mouse state.
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameInput.LastMouseState">
            <summary>
            The last mouse state.
            You can use this to know how was the last state of the mouse
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameInput.GamePadState">
            <summary>
            The current game pads states
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameInput.LastGamePadState">
            <summary>
            The last game pads states.
            You can use this to know how was the last states of the game pads
            </summary>
        </member>
        <member name="T:Gibbo.Library.GameScene">
            <summary>
            The Game Scene.
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameScene.Initialize">
            <summary>
            Initializes the Game Scene.
            The Layers, game objects and components of this scene are initialized too.
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameScene.LoadContent">
            <summary>
            For custom scenes.
            Load scene's content here
            </summary>
        </member>
        <member name="M:Gibbo.Library.GameScene.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the scene's logic here.
            The Layers, game objects and components of this scene are updated too.
            </summary>
            <param name="gameTime">The Gametime</param>
        </member>
        <member name="M:Gibbo.Library.GameScene.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draws the scene's here.
            The Layers, game objects and components of this scene are drawn too.
            </summary>
            <param name="gameTime">The Gametime</param>
        </member>
        <member name="M:Gibbo.Library.GameScene.SaveComponentValues">
            <summary>
            Saves all of this scene object's components
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameScene.Content">
            <summary>
            The active content manager
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameScene.SpriteBatch">
            <summary>
            The active spritebatch
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameScene.Graphics">
            <summary>
            The active graphics device manager
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameScene.Camera">
            <summary>
            The active camera on the scene
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameScene.Layers">
            <summary>
            The layers of this scene
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameScene.Name">
            <summary>
            The name of this scene
            </summary>
        </member>
        <member name="P:Gibbo.Library.GameScene.BackgroundColor">
            <summary>
            The background color of this scene
            </summary>
        </member>
        <member name="T:Gibbo.Library.GibboHelper">
            <summary>
            A static class that provides helpful methods to the game development editor or engine.
            </summary>
        </member>
        <member name="M:Gibbo.Library.GibboHelper.CopyDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Copies one entire directory to a destination
            </summary>
            <param name="sourceDirName">Source directory path</param>
            <param name="destDirName">Destination path</param>
            <param name="copySubDirs">Copy sub directories</param>
        </member>
        <member name="M:Gibbo.Library.GibboHelper.EncryptMD5(System.String)">
            <summary>
            Encrypt a string using the MD5 algorithm
            </summary>
            <param name="input">The original string</param>
            <returns>The encrypted result</returns>
        </member>
        <member name="M:Gibbo.Library.GibboHelper.SplitCamelCase(System.String)">
            <summary>
            Splits a string using the Camel Case method
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GibboHelper.RandomNumber(System.Single,System.Single)">
            <summary>
            Returns a safe random number with syncronize lock
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GibboHelper.RandomNumber(System.Int32,System.Int32)">
            <summary>
            Returns a safe random number with syncronize lock
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.GibboHelper.MakeRelativePath(System.String,System.String)">
            <summary>
            Creates a relative path from one file or folder to another.
            </summary>
            <param name="fromPath">Contains the directory that defines the start of the relative path.</param>
            <param name="toPath">Contains the path that defines the endpoint of the relative path.</param>
            <returns>The relative path from the start directory to the end path.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Gibbo.Library.GibboHelper.MakeExclusiveRelativePath(System.String,System.String)">
            <summary>
            Creates a relative path from one file or folder to another exclusivly.
            </summary>
            <param name="fromPath">Contains the directory that defines the start of the relative path.</param>
            <param name="toPath">Contains the path that defines the endpoint of the relative path.</param>
            <returns>The relative path from the start directory to the end path (exclusion).</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Gibbo.Library.GibboHelper.SerializeObject(System.String,System.Object)">
            <summary>
            Serializes an object at the location specified
            </summary>
            <param name="filename">The source filename</param>
            <param name="objectToSerialize">The object to serialize</param>
        </member>
        <member name="M:Gibbo.Library.GibboHelper.DeserializeObject(System.String)">
            <summary>
            Deserializes an object at the location specified
            </summary>
            <param name="filename">The source filename</param>
            <returns>A deserializated game object</returns>
        </member>
        <member name="M:Gibbo.Library.GibboHelper.VersionConfigToNamespaceAssemblyObjectBinder.BindToType(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:Gibbo.Library.GibboProject">
            <summary>
            The default project structure
            </summary>
        </member>
        <member name="M:Gibbo.Library.GibboProject.#ctor(System.String,System.String)">
            <summary>
            The default constructor
            </summary>
            <param name="projectName">The name of the project</param>
            <param name="projectPath">The path of the project</param>
        </member>
        <member name="M:Gibbo.Library.GibboProject.Load(System.String)">
            <summary>
            Loads a project and returns it
            </summary>
            <param name="filepath">The source filepath</param>
            <returns>A deserialized gibbo project</returns>
        </member>
        <member name="M:Gibbo.Library.GibboProject.SaveVisualScripts">
            <summary>
            Saves the project visual scripts
            </summary>
        </member>
        <member name="M:Gibbo.Library.GibboProject.Save">
            <summary>
            Saves the project at the current project path location
            </summary>
        </member>
        <member name="M:Gibbo.Library.GibboProject.ReloadSettings">
            <summary>
            Reloads the settings.ini configurations to memory
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProject.VisualScriptManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProject.Debug">
            <summary>
            Build Mode
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProject.SceneStartPath">
            <summary>
            The initial scene path
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProject.ProjectName">
            <summary>
            The name of the project
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProject.ProjectPath">
            <summary>
            The project path.
            This variable is updated everytime the editor /engine loads the project.
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProject.ProjectFilePath">
            <summary>
            The project file path.
            This variable is updated everytime the editor /engine loads the project.
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProject.ProjectSettings">
            <summary>
            The projects settings.
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProject.EditorSettings">
            <summary>
            The editor settings
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProject.Settings">
            <summary>
            Project settings
            Reloaded every time the project is loaded.
            To reload manually, call ReloadSettings()
            </summary>
        </member>
        <member name="T:Gibbo.Library.GibboProjectSettings">
            <summary>
            The project settings
            </summary>
        </member>
        <member name="M:Gibbo.Library.GibboProjectSettings.ToString">
            <summary>
            To String
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.GibboProjectSettings.HighlightActiveTilesetInEditor">
            <summary>
            Determines if the active tileset is going to be highlighted in the editor
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProjectSettings.HighlightActiveTilesetInGame">
            <summary>
            Determines if the active tileset is going to be highlighted in the game
            </summary>
        </member>
        <member name="P:Gibbo.Library.GibboProjectSettings.DefaultCollisionDetectionEnabled">
            <summary>
            Determines if the engine will use the default collision engine
            </summary>
        </member>
        <member name="T:Gibbo.Library.Layer">
            <summary>
            This class represents a game layer
            </summary>
        </member>
        <member name="M:Gibbo.Library.Layer.#ctor">
            <summary>
            The default constructor of this engine.
            </summary>
        </member>
        <member name="M:Gibbo.Library.Layer.Initialize">
            <summary>
            Initializes the layer.
            The Game objects of this scene and their components are also initialized.
            </summary>
        </member>
        <member name="M:Gibbo.Library.Layer.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the layer logic.
            The Game objects of this scene and their components are also updated.
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:Gibbo.Library.Layer.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Draws the layer logic.
            The Game objects of this scene and their components are also drawn.
            </summary>
            <param name="gameTime"></param>
            <param name="spriteBatch"></param>
        </member>
        <member name="M:Gibbo.Library.Layer.ToString">
            <summary>
            To String
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Layer.SaveComponentValues">
            <summary>
             Saves all of this layer object's components
            </summary>
        </member>
        <member name="P:Gibbo.Library.Layer.Name">
            <summary>
            The name of the layer.
            </summary>
        </member>
        <member name="P:Gibbo.Library.Layer.GameObjects">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.Layer.Visible">
            <summary>
            Determine if the object is to be drawn in the game.
            </summary>
        </member>
        <member name="T:Gibbo.Library.Primitives">
            <summary>
            Class responsable to draw 2D primitives
            </summary>
        </member>
        <member name="M:Gibbo.Library.Primitives.#cctor">
            <summary>
            The dafault constructor
            </summary>
        </member>
        <member name="M:Gibbo.Library.Primitives.DrawPixel(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Draw a pixel at the input location
            </summary>
            <param name="sb">The spritebatch</param>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <param name="c">Color</param>
        </member>
        <member name="M:Gibbo.Library.Primitives.DrawBox(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draw a box at the input location
            </summary>
            <param name="sb">The spritebatch</param>
            <param name="r">Destination rectangle</param>
            <param name="c">Color</param>
            <param name="linewidth">Border Width</param>
        </member>
        <member name="M:Gibbo.Library.Primitives.DrawBox(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draw a box at the input location
            </summary>
            <param name="sb">The spritebatch</param>
            <param name="upperLeft">Upper left position</param>
            <param name="lowerRight">Lower right position</param>
            <param name="c">Color</param>
        </member>
        <member name="M:Gibbo.Library.Primitives.DrawBoxFilled(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color)">
            <summary>
            Draw a filled box at the input location
            </summary>
            <param name="sb">The spritebatch</param>
            <param name="x">Position X</param>
            <param name="y">Position Y</param>
            <param name="w">Width</param>
            <param name="h">Height</param>
            <param name="c">Color</param>
        </member>
        <member name="M:Gibbo.Library.Primitives.DrawBoxFilled(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color)">
            <summary>
            Draw a filled box at the input location
            </summary>
            <param name="sb">The spritebatch</param>
            <param name="upperLeft">Upper left position</param>
            <param name="lowerRight">Lower right position</param>
            <param name="c">Color</param>
        </member>
        <member name="M:Gibbo.Library.Primitives.DrawBoxFilled(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color)">
            <summary>
            Draw a filled box at the input location
            </summary>
            <param name="sb">The spritebatch</param>
            <param name="r">Destination rectangle</param>
            <param name="c">Color</param>
        </member>
        <member name="M:Gibbo.Library.Primitives.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Single,System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draw a line at the input location
            </summary>
            <param name="sb">The spritebatch</param>
            <param name="x1">Position X1</param>
            <param name="y1">Position Y1</param>
            <param name="x2">Position X2</param>
            <param name="y2">Position Y2</param>
            <param name="c">Color</param>
            <param name="linewidth">Line Width</param>
        </member>
        <member name="M:Gibbo.Library.Primitives.DrawLine(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Color,System.Int32)">
            <summary>
            Draw a line at the input location
            </summary>
            <param name="sb">The spritebatch</param>
            <param name="startpos">Start position</param>
            <param name="endpos">End position</param>
            <param name="c">Color</param>
            <param name="linewidth">Line Width</param>
        </member>
        <member name="M:Gibbo.Library.PropertyLabel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.PropertyLabel.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="typeName"></param>
            <param name="name"></param>
        </member>
        <member name="M:Gibbo.Library.PropertyLabel.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.PropertyLabel.Equals(Gibbo.Library.PropertyLabel)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.PropertyLabel.op_Equality(Gibbo.Library.PropertyLabel,Gibbo.Library.PropertyLabel)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.PropertyLabel.op_Inequality(Gibbo.Library.PropertyLabel,Gibbo.Library.PropertyLabel)">
            <summary>
            
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.PropertyLabel.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.PropertyLabel.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.PropertyLabel.TypeName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.PropertyLabel.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.PropertyLabel.EqualityComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.PropertyLabel.EqualityComparer.System#Collections#Generic#IEqualityComparer{Gibbo#Library#PropertyLabel}#Equals(Gibbo.Library.PropertyLabel,Gibbo.Library.PropertyLabel)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.PropertyLabel.EqualityComparer.System#Collections#Generic#IEqualityComparer{Gibbo#Library#PropertyLabel}#GetHashCode(Gibbo.Library.PropertyLabel)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Gibbo.Library.SceneManager">
            <summary>
            The Scene Manager.
            This class is responsable for managing the active game scene.
            </summary>
        </member>
        <member name="M:Gibbo.Library.SceneManager.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Update of the active scene's logic.
            The collision engine and game input are also updated.
            </summary>
            <param name="gameTime">The gametime</param>
        </member>
        <member name="M:Gibbo.Library.SceneManager.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Draw the active scene
            </summary>
            <param name="gameTime">The gameTime</param>
        </member>
        <member name="M:Gibbo.Library.SceneManager.CreateScene(System.String)">
            <summary>
            Create a scene at the input location
            </summary>
            <param name="filename">The filename of the scene to be created</param>
            <returns>True if successfully created</returns>
        </member>
        <member name="M:Gibbo.Library.SceneManager.LoadScene(System.String)">
            <summary>
            Loads a scene to memory from a file.
            The active scene is updated to this one if loaded with success.
            </summary>
            <param name="scenePath">The path of the scene to load</param>
            <returns>True if successfully loaded</returns>
        </member>
        <member name="M:Gibbo.Library.SceneManager.SaveActiveScene">
            <summary>
            Saves the active scene at the input location
            </summary>
            <returns>True if scene is saved</returns>
        </member>
        <member name="P:Gibbo.Library.SceneManager.GameWindow">
            <summary>
            The active game window.
            Only available in the game mode
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.FPS">
            <summary>
            The current frame per second rate
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.ActiveTileset">
            <summary>
            The active tileset
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.CollisionManager">
            <summary>
            The collision manager
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.ActiveCamera">
            <summary>
            The active camera
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.IsEditor">
            <summary>
            Determines if we are running in editor mode
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.GameProject">
            <summary>
            Gets or sets the current game project.
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.ActiveScene">
            <summary>
            Gets or Sets the active game scene
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.Content">
            <summary>
            The active content manager
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.SpriteBatch">
            <summary>
            The active spritebatch
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.Graphics">
            <summary>
            The active graphics device manager
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.GraphicsDevice">
            <summary>
            The active graphics device
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.ActiveScenePath">
            <summary>
            The current active scene path
            </summary>
        </member>
        <member name="P:Gibbo.Library.SceneManager.ScriptsAssembly">
            <summary>
            The active scripts assembly reference
            </summary>
        </member>
        <member name="T:Gibbo.Library.TextureLoader">
            <summary>
            This class is responsable to manage the textures loading.
            Textures are loaded to memory for quick usage, if you load the same texture twice it will use the same space in memory in order to preserve resources.
            If you want to clear the cache in runtime, execute the TextureLoader.Clear() method.
            </summary>
        </member>
        <member name="M:Gibbo.Library.TextureLoader.FromContent(System.String)">
            <summary>
            Loads a texture from a file.
            The filename is relative to the game project path.
            </summary>
            <param name="filename">The filename of the texture to load</param>
            <returns>The loaded texture, null if not loaded</returns>
        </member>
        <member name="M:Gibbo.Library.TextureLoader.FromFile(System.String)">
            <summary>
            Loads a texture from a file.
            </summary>
            <param name="filename">The filename of the texture to load</param>
            <returns>The loaded texture, null if not loaded</returns>
        </member>
        <member name="M:Gibbo.Library.TextureLoader.GetColorTexture(Microsoft.Xna.Framework.Color)">
            <summary>
            Returns a texture from a given color
            </summary>
            <param name="color">Color</param>
            <returns>The texture created</returns>
        </member>
        <member name="M:Gibbo.Library.TextureLoader.Clear">
            <summary>
            Clears the texture's cache
            </summary>
        </member>
        <member name="T:Gibbo.Library.Transform">
            <summary>
            Transform class
            </summary>
        </member>
        <member name="M:Gibbo.Library.Transform.Translate(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Translates an object
            </summary>
            <param name="translation"></param>
        </member>
        <member name="M:Gibbo.Library.Transform.Translate(System.Single,System.Single)">
            <summary>
            Translates an object
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Gibbo.Library.Transform.DeepCopy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Transform.Clone">
            <summary>
            Clones this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.Transform.ToString">
            <summary>
            To String
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.Transform.Parent">
            <summary>
            The parent transformation
            </summary>
        </member>
        <member name="P:Gibbo.Library.Transform.GameObject">
            <summary>
            The game object holding this transform
            </summary>
        </member>
        <member name="P:Gibbo.Library.Transform.Position">
            <summary>
            The position of the object
            </summary>
        </member>
        <member name="P:Gibbo.Library.Transform.Rotation">
            <summary>
            The rotation of the object
            </summary>
        </member>
        <member name="P:Gibbo.Library.Transform.Scale">
            <summary>
            The scale of the object
            </summary>
        </member>
        <member name="T:Gibbo.Library.IniFile">
            <summary>
            Create a New INI file to store or load data
            </summary>
        </member>
        <member name="M:Gibbo.Library.IniFile.#ctor(System.String)">
            <summary>
            INIFile Constructor.
            </summary>
            <PARAM name="INIPath"></PARAM>
        </member>
        <member name="M:Gibbo.Library.IniFile.IniWriteValue(System.String,System.String,System.String)">
            <summary>
            Write Data to the INI File
            </summary>
            <PARAM name="Section"></PARAM>
            Section name
            <PARAM name="Key"></PARAM>
            Key Name
            <PARAM name="Value"></PARAM>
            Value Name
        </member>
        <member name="M:Gibbo.Library.IniFile.IniReadValue(System.String,System.String)">
            <summary>
            Read Data Value From the Ini File
            </summary>
            <PARAM name="Section"></PARAM>
            <PARAM name="Key"></PARAM>
            <PARAM name="Path"></PARAM>
            <returns></returns>
        </member>
        <member name="T:Gibbo.Library.LoopStream">
            <summary>
            Stream for looping playback
            </summary>
        </member>
        <member name="M:Gibbo.Library.LoopStream.#ctor(NAudio.Wave.WaveStream)">
            <summary>
            Creates a new Loop stream
            </summary>
            <param name="sourceStream">The stream to read from. Note: the Read method of this stream should return 0 when it reaches the end
            or else we will not loop to the start again.</param>
        </member>
        <member name="P:Gibbo.Library.LoopStream.EnableLooping">
            <summary>
            Use this to turn looping on or off
            </summary>
        </member>
        <member name="P:Gibbo.Library.LoopStream.WaveFormat">
            <summary>
            Return source stream's wave format
            </summary>
        </member>
        <member name="P:Gibbo.Library.LoopStream.Length">
            <summary>
            LoopStream simply returns
            </summary>
        </member>
        <member name="P:Gibbo.Library.LoopStream.Position">
            <summary>
            LoopStream simply passes on positioning to source stream
            </summary>
        </member>
        <member name="T:Gibbo.Library.UI.Label">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.UI.SkinnedControl">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.UI.SkinnedControl.ChangeGlobalSkin(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Gibbo.Library.UI.SkinnedControl.ChangeSkin(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="P:Gibbo.Library.UI.SkinnedControl.GlobalSkinTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.UI.SkinnedControl.SkinTexture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.UI.SkinnedControl.UseGlobalSkin">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.UI.Window">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.UI.Window.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            
            </summary>
            <param name="gameTime"></param>
            <param name="spriteBatch"></param>
        </member>
        <member name="P:Gibbo.Library.UI.Window.AutoSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.UI.Window.ShowTitle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.UI.Window.Padding">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.VisualScripting.Nodes.EventTypes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.VisualScripting.Nodes.Event">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.VisualScriptNode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScriptNode.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScriptNode.Execute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScriptNode.EditorPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScriptNode.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScriptNode.InputInterfaces">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScriptNode.OutputInterfaces">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScripting.Nodes.Event.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScripting.Nodes.Event.Execute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScripting.Nodes.Event.EventType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.VisualScripting.Nodes.SetPosition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScripting.Nodes.SetPosition.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScripting.Nodes.SetPosition.Execute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScripting.Nodes.SetPosition.Increment">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScripting.Nodes.SetPosition.Position">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.VisualScripting.Values.Trigger">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.VisualScriptConnection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScriptConnection.EstablishConnection(Gibbo.Library.VisualScriptNodeInterfaceOutput,Gibbo.Library.VisualScriptNodeInterfaceInput)">
            <summary>
            
            </summary>
            <param name="outputInterface"></param>
            <param name="inputInterface"></param>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.VisualScriptConnection.OutputInterface">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScriptConnection.InputInterface">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.VisualScriptConnectionsCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScriptConnectionsCollection.#ctor">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScriptConnectionsCollection.IndexOf(Gibbo.Library.VisualScriptConnection)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.VisualScriptConnectionsCollection.Add(Gibbo.Library.VisualScriptConnection)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.VisualScriptConnectionsCollection.Remove(Gibbo.Library.VisualScriptConnection)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScriptConnectionsCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScriptConnectionsCollection.AddRange(Gibbo.Library.VisualScriptConnectionsCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScriptConnectionsCollection.AddRange(Gibbo.Library.VisualScriptConnection[])">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScriptConnectionsCollection.Contains(Gibbo.Library.VisualScriptConnection)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.VisualScriptConnectionsCollection.Insert(System.Int32,Gibbo.Library.VisualScriptConnection)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScriptConnectionsCollection.Find(System.Predicate{Gibbo.Library.VisualScriptConnection})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.VisualScriptConnectionsCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Gibbo.Library.VisualScriptManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScriptManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScriptManager.AddVisualScript(Gibbo.Library.VisualScript)">
            <summary>
            
            </summary>
            <param name="visualScript"></param>
        </member>
        <member name="P:Gibbo.Library.VisualScriptManager.VisualScripts">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.VisualScriptNodeInterfaceOutput">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.VisualScriptNodeInterface">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScriptNodeInterface.RemoveConnections">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScriptNodeInterface.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScriptNodeInterface.Parent">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScriptNodeInterface.Connections">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScriptNodeInterfaceOutput.Transmission">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.VisualScriptInterfacesCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScriptInterfacesCollection.#ctor(Gibbo.Library.VisualScriptNode)">
            <summary>
            
            </summary>
            <param name="owner"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScriptInterfacesCollection.IndexOf(Gibbo.Library.VisualScriptNodeInterface)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.VisualScriptInterfacesCollection.Add(Gibbo.Library.VisualScriptNodeInterface)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.VisualScriptInterfacesCollection.Remove(Gibbo.Library.VisualScriptNodeInterface)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScriptInterfacesCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScriptInterfacesCollection.AddRange(Gibbo.Library.VisualScriptInterfacesCollection)">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScriptInterfacesCollection.AddRange(Gibbo.Library.VisualScriptNodeInterface[])">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScriptInterfacesCollection.Contains(Gibbo.Library.VisualScriptNodeInterface)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Gibbo.Library.VisualScriptInterfacesCollection.Insert(System.Int32,Gibbo.Library.VisualScriptNodeInterface)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="P:Gibbo.Library.VisualScriptInterfacesCollection.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Gibbo.Library.VisualScript">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScript.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Gibbo.Library.VisualScript.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScript.Draw(Microsoft.Xna.Framework.GameTime,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            
            </summary>
            <param name="gameTime"></param>
            <param name="spriteBatch"></param>
        </member>
        <member name="M:Gibbo.Library.VisualScript.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Gibbo.Library.VisualScript.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Gibbo.Library.VisualScript.Nodes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Gibbo.Library.VisualScriptNodeInterfaceInput">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
